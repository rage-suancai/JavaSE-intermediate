package javaSE.javase15;

/**
 * 二叉排序树
 * 我们前面学习的二叉树效率是不够的 我们需要的是一种效率更高的二叉树 因此 基于二叉树的改进 提出了二叉树查找树
 *
 * 不难发现 每个节点的左子树 一定小于当前节点的值 每个节点的右子树 一定大于当前节点的值 这样的二叉树称为二叉排序树 利用二分搜索的思想 我们就可以快速查找某个节点
 *
 * 平衡二叉树
 * 在了解了二叉树之后 我们发现 如果根节点为10 现在加入到节点的值从9开始 依次减小到1 那么这个表就会很奇怪
 *
 * 显然 当所有节点都排列到一边 这种情况下 查找效率会直接退化为最原始的二叉树 因此我们需要维持二叉树的平衡 才能维持原有的查找效率
 *
 * 现在我们对二叉排序树加以约束 要求每个节点的左右两个子树的高度差的绝对值不能超过1 这样的二叉树称为平衡二叉树 同时要求每个节点的左右子树都是平衡二叉树 这样就不会因为一边的疯狂增加导致失衡
 *
 * 通过以上四种情况的处理 最终得到维护平衡二叉树的算法
 */
public class Main {

    public static void main(String[] args) {



    }

}
